# coding: utf-8

"""
    BlackFox

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from black_fox_client.models.hidden_layer_config_keras_activation_function import HiddenLayerConfigKerasActivationFunction  # noqa: F401,E501
from black_fox_client.models.layer_config_keras_activation_function import LayerConfigKerasActivationFunction  # noqa: F401,E501


class KerasTrainingConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'dropout': 'float',
        'dataset_id': 'str',
        'input_layer': 'LayerConfigKerasActivationFunction',
        'output_layer': 'LayerConfigKerasActivationFunction',
        'hidden_layer_configs': 'list[HiddenLayerConfigKerasActivationFunction]',
        'training_algorithm': 'str',
        'max_epoch': 'int',
        'cross_validation': 'bool',
        'training_ratio': 'float',
        'random_seed': 'int'
    }

    attribute_map = {
        'dropout': 'dropout',
        'dataset_id': 'datasetId',
        'input_layer': 'inputLayer',
        'output_layer': 'outputLayer',
        'hidden_layer_configs': 'hiddenLayerConfigs',
        'training_algorithm': 'trainingAlgorithm',
        'max_epoch': 'maxEpoch',
        'cross_validation': 'crossValidation',
        'training_ratio': 'trainingRatio',
        'random_seed': 'randomSeed'
    }

    def __init__(self, dropout=None, dataset_id=None, input_layer=None, output_layer=None, hidden_layer_configs=None, training_algorithm=None, max_epoch=None, cross_validation=None, training_ratio=None, random_seed=None):  # noqa: E501
        """KerasTrainingConfig - a model defined in Swagger"""  # noqa: E501

        self._dropout = None
        self._dataset_id = None
        self._input_layer = None
        self._output_layer = None
        self._hidden_layer_configs = None
        self._training_algorithm = None
        self._max_epoch = None
        self._cross_validation = None
        self._training_ratio = None
        self._random_seed = None
        self.discriminator = None

        if dropout is not None:
            self.dropout = dropout
        if dataset_id is not None:
            self.dataset_id = dataset_id
        if input_layer is not None:
            self.input_layer = input_layer
        if output_layer is not None:
            self.output_layer = output_layer
        if hidden_layer_configs is not None:
            self.hidden_layer_configs = hidden_layer_configs
        if training_algorithm is not None:
            self.training_algorithm = training_algorithm
        if max_epoch is not None:
            self.max_epoch = max_epoch
        if cross_validation is not None:
            self.cross_validation = cross_validation
        if training_ratio is not None:
            self.training_ratio = training_ratio
        if random_seed is not None:
            self.random_seed = random_seed

    @property
    def dropout(self):
        """Gets the dropout of this KerasTrainingConfig.  # noqa: E501


        :return: The dropout of this KerasTrainingConfig.  # noqa: E501
        :rtype: float
        """
        return self._dropout

    @dropout.setter
    def dropout(self, dropout):
        """Sets the dropout of this KerasTrainingConfig.


        :param dropout: The dropout of this KerasTrainingConfig.  # noqa: E501
        :type: float
        """

        self._dropout = dropout

    @property
    def dataset_id(self):
        """Gets the dataset_id of this KerasTrainingConfig.  # noqa: E501


        :return: The dataset_id of this KerasTrainingConfig.  # noqa: E501
        :rtype: str
        """
        return self._dataset_id

    @dataset_id.setter
    def dataset_id(self, dataset_id):
        """Sets the dataset_id of this KerasTrainingConfig.


        :param dataset_id: The dataset_id of this KerasTrainingConfig.  # noqa: E501
        :type: str
        """

        self._dataset_id = dataset_id

    @property
    def input_layer(self):
        """Gets the input_layer of this KerasTrainingConfig.  # noqa: E501


        :return: The input_layer of this KerasTrainingConfig.  # noqa: E501
        :rtype: LayerConfigKerasActivationFunction
        """
        return self._input_layer

    @input_layer.setter
    def input_layer(self, input_layer):
        """Sets the input_layer of this KerasTrainingConfig.


        :param input_layer: The input_layer of this KerasTrainingConfig.  # noqa: E501
        :type: LayerConfigKerasActivationFunction
        """

        self._input_layer = input_layer

    @property
    def output_layer(self):
        """Gets the output_layer of this KerasTrainingConfig.  # noqa: E501


        :return: The output_layer of this KerasTrainingConfig.  # noqa: E501
        :rtype: LayerConfigKerasActivationFunction
        """
        return self._output_layer

    @output_layer.setter
    def output_layer(self, output_layer):
        """Sets the output_layer of this KerasTrainingConfig.


        :param output_layer: The output_layer of this KerasTrainingConfig.  # noqa: E501
        :type: LayerConfigKerasActivationFunction
        """

        self._output_layer = output_layer

    @property
    def hidden_layer_configs(self):
        """Gets the hidden_layer_configs of this KerasTrainingConfig.  # noqa: E501


        :return: The hidden_layer_configs of this KerasTrainingConfig.  # noqa: E501
        :rtype: list[HiddenLayerConfigKerasActivationFunction]
        """
        return self._hidden_layer_configs

    @hidden_layer_configs.setter
    def hidden_layer_configs(self, hidden_layer_configs):
        """Sets the hidden_layer_configs of this KerasTrainingConfig.


        :param hidden_layer_configs: The hidden_layer_configs of this KerasTrainingConfig.  # noqa: E501
        :type: list[HiddenLayerConfigKerasActivationFunction]
        """

        self._hidden_layer_configs = hidden_layer_configs

    @property
    def training_algorithm(self):
        """Gets the training_algorithm of this KerasTrainingConfig.  # noqa: E501


        :return: The training_algorithm of this KerasTrainingConfig.  # noqa: E501
        :rtype: str
        """
        return self._training_algorithm

    @training_algorithm.setter
    def training_algorithm(self, training_algorithm):
        """Sets the training_algorithm of this KerasTrainingConfig.


        :param training_algorithm: The training_algorithm of this KerasTrainingConfig.  # noqa: E501
        :type: str
        """
        allowed_values = ["SGD", "RMSprop", "Adagrad", "Adadelta", "Adam", "Adamax", "Nadam"]  # noqa: E501
        if training_algorithm not in allowed_values:
            raise ValueError(
                "Invalid value for `training_algorithm` ({0}), must be one of {1}"  # noqa: E501
                .format(training_algorithm, allowed_values)
            )

        self._training_algorithm = training_algorithm

    @property
    def max_epoch(self):
        """Gets the max_epoch of this KerasTrainingConfig.  # noqa: E501


        :return: The max_epoch of this KerasTrainingConfig.  # noqa: E501
        :rtype: int
        """
        return self._max_epoch

    @max_epoch.setter
    def max_epoch(self, max_epoch):
        """Sets the max_epoch of this KerasTrainingConfig.


        :param max_epoch: The max_epoch of this KerasTrainingConfig.  # noqa: E501
        :type: int
        """

        self._max_epoch = max_epoch

    @property
    def cross_validation(self):
        """Gets the cross_validation of this KerasTrainingConfig.  # noqa: E501


        :return: The cross_validation of this KerasTrainingConfig.  # noqa: E501
        :rtype: bool
        """
        return self._cross_validation

    @cross_validation.setter
    def cross_validation(self, cross_validation):
        """Sets the cross_validation of this KerasTrainingConfig.


        :param cross_validation: The cross_validation of this KerasTrainingConfig.  # noqa: E501
        :type: bool
        """

        self._cross_validation = cross_validation

    @property
    def training_ratio(self):
        """Gets the training_ratio of this KerasTrainingConfig.  # noqa: E501


        :return: The training_ratio of this KerasTrainingConfig.  # noqa: E501
        :rtype: float
        """
        return self._training_ratio

    @training_ratio.setter
    def training_ratio(self, training_ratio):
        """Sets the training_ratio of this KerasTrainingConfig.


        :param training_ratio: The training_ratio of this KerasTrainingConfig.  # noqa: E501
        :type: float
        """

        self._training_ratio = training_ratio

    @property
    def random_seed(self):
        """Gets the random_seed of this KerasTrainingConfig.  # noqa: E501


        :return: The random_seed of this KerasTrainingConfig.  # noqa: E501
        :rtype: int
        """
        return self._random_seed

    @random_seed.setter
    def random_seed(self, random_seed):
        """Sets the random_seed of this KerasTrainingConfig.


        :param random_seed: The random_seed of this KerasTrainingConfig.  # noqa: E501
        :type: int
        """

        self._random_seed = random_seed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, KerasTrainingConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
